/* tslint:disable */
/* eslint-disable */
/**
 * Task Tracker API
 * Task Tracker API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: trnka.roman13@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';
import type { TaskDTO } from './TaskDTO';
import {
    TaskDTOFromJSON,
    TaskDTOFromJSONTyped,
    TaskDTOToJSON,
} from './TaskDTO';

/**
 * 
 * @export
 * @interface ProjectResponse
 */
export interface ProjectResponse {
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof ProjectResponse
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProjectResponse
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    projectCover?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof ProjectResponse
     */
    owner?: UserDTO;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProjectResponse
     */
    userProjects?: Array<object>;
    /**
     * 
     * @type {Array<TaskDTO>}
     * @memberof ProjectResponse
     */
    tasks?: Array<TaskDTO>;
    /**
     * 
     * @type {Array<UserDTO>}
     * @memberof ProjectResponse
     */
    participants?: Array<UserDTO>;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    open?: boolean;
}

/**
 * Check if a given object implements the ProjectResponse interface.
 */
export function instanceOfProjectResponse(value: object): value is ProjectResponse {
    return true;
}

export function ProjectResponseFromJSON(json: any): ProjectResponse {
    return ProjectResponseFromJSONTyped(json, false);
}

export function ProjectResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'projectCover': json['projectCover'] == null ? undefined : json['projectCover'],
        'owner': json['owner'] == null ? undefined : UserDTOFromJSON(json['owner']),
        'userProjects': json['userProjects'] == null ? undefined : json['userProjects'],
        'tasks': json['tasks'] == null ? undefined : ((json['tasks'] as Array<any>).map(TaskDTOFromJSON)),
        'participants': json['participants'] == null ? undefined : ((json['participants'] as Array<any>).map(UserDTOFromJSON)),
        'open': json['open'] == null ? undefined : json['open'],
    };
}

export function ProjectResponseToJSON(value?: ProjectResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'projectCover': value['projectCover'],
        'owner': UserDTOToJSON(value['owner']),
        'userProjects': value['userProjects'],
        'tasks': value['tasks'] == null ? undefined : ((value['tasks'] as Array<any>).map(TaskDTOToJSON)),
        'participants': value['participants'] == null ? undefined : ((value['participants'] as Array<any>).map(UserDTOToJSON)),
        'open': value['open'],
    };
}

