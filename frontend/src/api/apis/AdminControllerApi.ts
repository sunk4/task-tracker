/* tslint:disable */
/* eslint-disable */
/**
 * Task Tracker API
 * Task Tracker API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: trnka.roman13@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageResponseUsersRoleResponse,
  UsersRoleRequest,
  UsersRoleResponse,
} from '../models/index';
import {
    PageResponseUsersRoleResponseFromJSON,
    PageResponseUsersRoleResponseToJSON,
    UsersRoleRequestFromJSON,
    UsersRoleRequestToJSON,
    UsersRoleResponseFromJSON,
    UsersRoleResponseToJSON,
} from '../models/index';

export interface FindAllUsersRoleRequest {
    pageNum?: number;
    pageSize?: number;
}

export interface FindUserRolesByIdRequest {
    id: string;
}

export interface UpdateUserRoleRequest {
    usersRoleRequest: UsersRoleRequest;
}

/**
 * 
 */
export class AdminControllerApi extends runtime.BaseAPI {

    /**
     */
    async findAllUsersRoleRaw(requestParameters: FindAllUsersRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResponseUsersRoleResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pageNum'] != null) {
            queryParameters['pageNum'] = requestParameters['pageNum'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageResponseUsersRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async findAllUsersRole(requestParameters: FindAllUsersRoleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResponseUsersRoleResponse> {
        const response = await this.findAllUsersRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findUserRolesByIdRaw(requestParameters: FindUserRolesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findUserRolesById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersRoleResponseFromJSON(jsonValue));
    }

    /**
     */
    async findUserRolesById(requestParameters: FindUserRolesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersRoleResponse> {
        const response = await this.findUserRolesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserRoleRaw(requestParameters: UpdateUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['usersRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'usersRoleRequest',
                'Required parameter "usersRoleRequest" was null or undefined when calling updateUserRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UsersRoleRequestToJSON(requestParameters['usersRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateUserRole(requestParameters: UpdateUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserRoleRaw(requestParameters, initOverrides);
    }

}
